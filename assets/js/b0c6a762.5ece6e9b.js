"use strict";(self.webpackChunkjdk_source_code_study=self.webpackChunkjdk_source_code_study||[]).push([[3975],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),h=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=h(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=h(t),g=i,f=u["".concat(c,".").concat(g)]||u[g]||d[g]||a;return t?r.createElement(f,s(s({ref:n},l),{},{components:t})):r.createElement(f,s({ref:n},l))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var h=2;h<a;h++)s[h]=t[h];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8308:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>h});var r=t(7462),i=(t(7294),t(3905));const a={},s=void 0,o={unversionedId:"rt.jar/lang/String",id:"rt.jar/lang/String",title:"String",description:"String",source:"@site/docs/rt.jar/lang/String.md",sourceDirName:"rt.jar/lang",slug:"/rt.jar/lang/String",permalink:"/jdk-source-code-study/docs/rt.jar/lang/String",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/rt.jar/lang/String.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Object",permalink:"/jdk-source-code-study/docs/rt.jar/lang/Object"}},c={},h=[{value:"String",id:"string",level:2},{value:"Field",id:"field",level:3},{value:"method",id:"method",level:3}],l={toc:h};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"string"},"String"),(0,i.kt)("h3",{id:"field"},"Field"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"private final char value[]\u3002",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u79c1\u6709\u4e0d\u53ef\u6539\u53d8\u7684char\u6570\u7ec4\u3002"))),(0,i.kt)("li",{parentName:"ol"},"private int hash;",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u79c1\u6709int\u5c5e\u6027\u3002"))),(0,i.kt)("li",{parentName:"ol"},"private static final long serialVersionUID\u3002",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"serialVersionUID\u3002"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("font",{color:"red"},"private static final ObjectStreamField[] serialPersistentFields\u3002"),"- \uff1f")),(0,i.kt)("h3",{id:"method"},"method"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"public String()\u3002",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"\u65e0\u53c2\u6784\u9020\u65b9\u6cd5\u3002"),(0,i.kt)("li",{parentName:"ul"},"\u521b\u5efa\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'\n/*\n * Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport java.io.ObjectStreamField;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.charset.Charset;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Formatter;\nimport java.util.Locale;\nimport java.util.Objects;\nimport java.util.StringJoiner;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\n\n/**\n * The {@code String} class represents character strings. All\n * string literals in Java programs, such as {@code "abc"}, are\n * implemented as instances of this class.\n * <p>\n * Strings are constant; their values cannot be changed after they\n * are created. String buffers support mutable strings.\n * Because String objects are immutable they can be shared. For example:\n * <blockquote><pre>\n *     String str = "abc";\n * </pre></blockquote><p>\n * is equivalent to:\n * <blockquote><pre>\n *     char data[] = {\'a\', \'b\', \'c\'};\n *     String str = new String(data);\n * </pre></blockquote><p>\n * Here are some more examples of how strings can be used:\n * <blockquote><pre>\n *     System.out.println("abc");\n *     String cde = "cde";\n *     System.out.println("abc" + cde);\n *     String c = "abc".substring(2,3);\n *     String d = cde.substring(1, 2);\n * </pre></blockquote>\n * <p>\n * The class {@code String} includes methods for examining\n * individual characters of the sequence, for comparing strings, for\n * searching strings, for extracting substrings, and for creating a\n * copy of a string with all characters translated to uppercase or to\n * lowercase. Case mapping is based on the Unicode Standard version\n * specified by the {@link java.lang.Character Character} class.\n * <p>\n * The Java language provides special support for the string\n * concatenation operator (&nbsp;+&nbsp;), and for conversion of\n * other objects to strings. String concatenation is implemented\n * through the {@code StringBuilder}(or {@code StringBuffer})\n * class and its {@code append} method.\n * String conversions are implemented through the method\n * {@code toString}, defined by {@code Object} and\n * inherited by all classes in Java. For additional information on\n * string concatenation and conversion, see Gosling, Joy, and Steele,\n * <i>The Java Language Specification</i>.\n *\n * <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * <p>A {@code String} represents a string in the UTF-16 format\n * in which <em>supplementary characters</em> are represented by <em>surrogate\n * pairs</em> (see the section <a href="Character.html#unicode">Unicode\n * Character Representations</a> in the {@code Character} class for\n * more information).\n * Index values refer to {@code char} code units, so a supplementary\n * character uses two positions in a {@code String}.\n * <p>The {@code String} class provides methods for dealing with\n * Unicode code points (i.e., characters), in addition to those for\n * dealing with Unicode code units (i.e., {@code char} values).\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @see     java.lang.Object#toString()\n * @see     java.lang.StringBuffer\n * @see     java.lang.StringBuilder\n * @see     java.nio.charset.Charset\n * @since   JDK1.0\n */\n\npublic final class String\n    implements java.io.Serializable, Comparable<String>, CharSequence {\n    /** The value is used for character storage. */\n    private final char value[];\n\n    /** Cache the hash code for the string */\n    private int hash; // Default to 0\n\n    /** use serialVersionUID from JDK 1.0.2 for interoperability */\n    private static final long serialVersionUID = -6849794470754667710L;\n\n    /**\n     * Class String is special cased within the Serialization Stream Protocol.\n     *\n     * A String instance is written into an ObjectOutputStream according to\n     * <a href="{@docRoot}/../platform/serialization/spec/output.html">\n     * Object Serialization Specification, Section 6.2, "Stream Elements"</a>\n     */\n    private static final ObjectStreamField[] serialPersistentFields =\n        new ObjectStreamField[0];\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * an empty character sequence.  Note that use of this constructor is\n     * unnecessary since Strings are immutable.\n     */\n    public String() {\n        this.value = "".value;\n    }\n\n    /**\n     * Initializes a newly created {@code String} object so that it represents\n     * the same sequence of characters as the argument; in other words, the\n     * newly created string is a copy of the argument string. Unless an\n     * explicit copy of {@code original} is needed, use of this constructor is\n     * unnecessary since Strings are immutable.\n     *\n     * @param  original\n     *         A {@code String}\n     */\n    public String(String original) {\n        this.value = original.value;\n        this.hash = original.hash;\n    }\n\n    /**\n     * Allocates a new {@code String} so that it represents the sequence of\n     * characters currently contained in the character array argument. The\n     * contents of the character array are copied; subsequent modification of\n     * the character array does not affect the newly created string.\n     *\n     * @param  value\n     *         The initial value of the string\n     */\n    public String(char value[]) {\n        this.value = Arrays.copyOf(value, value.length);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the character array argument. The {@code offset} argument is the\n     * index of the first character of the subarray and the {@code count}\n     * argument specifies the length of the subarray. The contents of the\n     * subarray are copied; subsequent modification of the character array does\n     * not affect the newly created string.\n     *\n     * @param  value\n     *         Array that is the source of characters\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code count} arguments index\n     *          characters outside the bounds of the {@code value} array\n     */\n    public String(char value[], int offset, int count) {\n        if (offset < 0) {\n            throw new StringIndexOutOfBoundsException(offset);\n        }\n        if (count <= 0) {\n            if (count < 0) {\n                throw new StringIndexOutOfBoundsException(count);\n            }\n            // \u957f\u5ea6\u7b49\u4e8e0\uff0c\u4e14\u5982\u679c\u8d77\u59cb\u4e0b\u6807\u5c0f\u4e8e\u7b49\u4e8e\u539f\u59cb\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u5219\u521b\u5efa\u7a7a\u5b57\u7b26\u4e32\n            if (offset <= value.length) {\n                this.value = "".value;\n                return;\n            }\n        }\n        // Note: offset or count might be near -1>>>1.\n        if (offset > value.length - count) {\n            throw new StringIndexOutOfBoundsException(offset + count);\n        }\n        this.value = Arrays.copyOfRange(value, offset, offset+count);\n    }\n\n    /**\n     * Allocates a new {@code String} that contains characters from a subarray\n     * of the <a href="Character.html#unicode">Unicode code point</a> array\n     * argument.  The {@code offset} argument is the index of the first code\n     * point of the subarray and the {@code count} argument specifies the\n     * length of the subarray.  The contents of the subarray are converted to\n     * {@code char}s; subsequent modification of the {@code int} array does not\n     * affect the newly created string.\n     *\n     * @param  codePoints\n     *         Array that is the source of Unicode code points\n     *\n     * @param  offset\n     *         The initial offset\n     *\n     * @param  count\n     *         The length\n     *\n     * @throws  IllegalArgumentException\n     *          If any invalid Unicode code point is found in {@code\n     *          codePoints}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code count} arguments index\n     *          characters outside the bounds of the {@code codePoints} array\n     *\n     * @since  1.5\n     */\n    public String(int[] codePoints, int offset, int count) {\n        if (offset < 0) {\n            throw new StringIndexOutOfBoundsException(offset);\n        }\n        if (count <= 0) {\n            if (count < 0) {\n                throw new StringIndexOutOfBoundsException(count);\n            }\n            if (offset <= codePoints.length) {\n                this.value = "".value;\n                return;\n            }\n        }\n        // Note: offset or count might be near -1>>>1.\n        if (offset > codePoints.length - count) {\n            throw new StringIndexOutOfBoundsException(offset + count);\n        }\n\n        final int end = offset + count;\n\n        // Pass 1: Compute precise size of char[]\n        int n = count;\n        for (int i = offset; i < end; i++) {\n            int c = codePoints[i];\n            if (Character.isBmpCodePoint(c))\n                continue;\n            else if (Character.isValidCodePoint(c))\n                n++;\n            else throw new IllegalArgumentException(Integer.toString(c));\n        }\n\n        // Pass 2: Allocate and fill in char[]\n        final char[] v = new char[n];\n\n        for (int i = offset, j = 0; i < end; i++, j++) {\n            int c = codePoints[i];\n            if (Character.isBmpCodePoint(c))\n                v[j] = (char)c;\n            else\n                Character.toSurrogates(c, v, j++);\n        }\n\n        this.value = v;\n    }\n\n    /**\n     * Allocates a new {@code String} constructed from a subarray of an array\n     * of 8-bit integer values.\n     *\n     * <p> The {@code offset} argument is the index of the first byte of the\n     * subarray, and the {@code count} argument specifies the length of the\n     * subarray.\n     *\n     * <p> Each {@code byte} in the subarray is converted to a {@code char} as\n     * specified in the method above.\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK&nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\'s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @param  offset\n     *         The initial offset\n     * @param  count\n     *         The length\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} or {@code count} argument is invalid\n     *\n     * @see  #String(byte[], int)\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated\n    public String(byte ascii[], int hibyte, int offset, int count) {\n        checkBounds(ascii, offset, count);\n        char value[] = new char[count];\n\n        if (hibyte == 0) {\n            for (int i = count; i-- > 0;) {\n                value[i] = (char)(ascii[i + offset] & 0xff);\n            }\n        } else {\n            hibyte <<= 8;\n            for (int i = count; i-- > 0;) {\n                value[i] = (char)(hibyte | (ascii[i + offset] & 0xff));\n            }\n        }\n        this.value = value;\n    }\n\n    /**\n     * Allocates a new {@code String} containing characters constructed from\n     * an array of 8-bit integer values. Each character <i>c</i>in the\n     * resulting string is constructed from the corresponding component\n     * <i>b</i> in the byte array such that:\n     *\n     * <blockquote><pre>\n     *     <b><i>c</i></b> == (char)(((hibyte &amp; 0xff) &lt;&lt; 8)\n     *                         | (<b><i>b</i></b> &amp; 0xff))\n     * </pre></blockquote>\n     *\n     * @deprecated  This method does not properly convert bytes into\n     * characters.  As of JDK&nbsp;1.1, the preferred way to do this is via the\n     * {@code String} constructors that take a {@link\n     * java.nio.charset.Charset}, charset name, or that use the platform\'s\n     * default charset.\n     *\n     * @param  ascii\n     *         The bytes to be converted to characters\n     *\n     * @param  hibyte\n     *         The top 8 bits of each 16-bit Unicode code unit\n     *\n     * @see  #String(byte[], int, int, java.lang.String)\n     * @see  #String(byte[], int, int, java.nio.charset.Charset)\n     * @see  #String(byte[], int, int)\n     * @see  #String(byte[], java.lang.String)\n     * @see  #String(byte[], java.nio.charset.Charset)\n     * @see  #String(byte[])\n     */\n    @Deprecated\n    public String(byte ascii[], int hibyte) {\n        this(ascii, hibyte, 0, ascii.length);\n    }\n\n    /* Common private utility method used to bounds check the byte array\n     * and requested offset & length values used by the String(byte[],..)\n     * constructors.\n     */\n    private static void checkBounds(byte[] bytes, int offset, int length) {\n        if (length < 0)\n            throw new StringIndexOutOfBoundsException(length);\n        if (offset < 0)\n            throw new StringIndexOutOfBoundsException(offset);\n        if (offset > bytes.length - length)\n            throw new StringIndexOutOfBoundsException(offset + length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified charset.  The length of the new {@code String}\n     * is a function of the charset, and hence may not be equal to the length\n     * of the subarray.\n     *\n     * <p> The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code length} arguments index\n     *          characters outside the bounds of the {@code bytes} array\n     *\n     * @since  JDK1.1\n     */\n    public String(byte bytes[], int offset, int length, String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName == null)\n            throw new NullPointerException("charsetName");\n        checkBounds(bytes, offset, length);\n        this.value = StringCoding.decode(charsetName, bytes, offset, length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the subarray.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\'s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and {@code length} arguments index\n     *          characters outside the bounds of the {@code bytes} array\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], int offset, int length, Charset charset) {\n        if (charset == null)\n            throw new NullPointerException("charset");\n        checkBounds(bytes, offset, length);\n        this.value =  StringCoding.decode(charset, bytes, offset, length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the specified {@linkplain java.nio.charset.Charset charset}.  The\n     * length of the new {@code String} is a function of the charset, and hence\n     * may not be equal to the length of the byte array.\n     *\n     * <p> The behavior of this constructor when the given bytes are not valid\n     * in the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  JDK1.1\n     */\n    public String(byte bytes[], String charsetName)\n            throws UnsupportedEncodingException {\n        this(bytes, 0, bytes.length, charsetName);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of\n     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.\n     * The length of the new {@code String} is a function of the charset, and\n     * hence may not be equal to the length of the byte array.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\'s default replacement string.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset charset} to be used to\n     *         decode the {@code bytes}\n     *\n     * @since  1.6\n     */\n    public String(byte bytes[], Charset charset) {\n        this(bytes, 0, bytes.length, charset);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified subarray of\n     * bytes using the platform\'s default charset.  The length of the new\n     * {@code String} is a function of the charset, and hence may not be equal\n     * to the length of the subarray.\n     *\n     * <p> The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @param  offset\n     *         The index of the first byte to decode\n     *\n     * @param  length\n     *         The number of bytes to decode\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If the {@code offset} and the {@code length} arguments index\n     *          characters outside the bounds of the {@code bytes} array\n     *\n     * @since  JDK1.1\n     */\n    public String(byte bytes[], int offset, int length) {\n        checkBounds(bytes, offset, length);\n        this.value = StringCoding.decode(bytes, offset, length);\n    }\n\n    /**\n     * Constructs a new {@code String} by decoding the specified array of bytes\n     * using the platform\'s default charset.  The length of the new {@code\n     * String} is a function of the charset, and hence may not be equal to the\n     * length of the byte array.\n     *\n     * <p> The behavior of this constructor when the given bytes are not valid\n     * in the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param  bytes\n     *         The bytes to be decoded into characters\n     *\n     * @since  JDK1.1\n     */\n    public String(byte bytes[]) {\n        this(bytes, 0, bytes.length);\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string buffer argument. The contents of the\n     * string buffer are copied; subsequent modification of the string buffer\n     * does not affect the newly created string.\n     *\n     * @param  buffer\n     *         A {@code StringBuffer}\n     */\n    public String(StringBuffer buffer) {\n        synchronized(buffer) {\n            this.value = Arrays.copyOf(buffer.getValue(), buffer.length());\n        }\n    }\n\n    /**\n     * Allocates a new string that contains the sequence of characters\n     * currently contained in the string builder argument. The contents of the\n     * string builder are copied; subsequent modification of the string builder\n     * does not affect the newly created string.\n     *\n     * <p> This constructor is provided to ease migration to {@code\n     * StringBuilder}. Obtaining a string from a string builder via the {@code\n     * toString} method is likely to run faster and is generally preferred.\n     *\n     * @param   builder\n     *          A {@code StringBuilder}\n     *\n     * @since  1.5\n     */\n    public String(StringBuilder builder) {\n        this.value = Arrays.copyOf(builder.getValue(), builder.length());\n    }\n\n    /*\n    * Package private constructor which shares value array for speed.\n    * this constructor is always expected to be called with share==true.\n    * a separate constructor is needed because we already have a public\n    * String(char[]) constructor that makes a copy of the given char[].\n    */\n    String(char[] value, boolean share) {\n        // assert share : "unshared not supported";\n        this.value = value;\n    }\n\n    /**\n     * Returns the length of this string.\n     * The length is equal to the number of <a href="Character.html#unicode">Unicode\n     * code units</a> in the string.\n     *\n     * @return  the length of the sequence of characters represented by this\n     *          object.\n     */\n    public int length() {\n        return value.length;\n    }\n\n    /**\n     * Returns {@code true} if, and only if, {@link #length()} is {@code 0}.\n     *\n     * @return {@code true} if {@link #length()} is {@code 0}, otherwise\n     * {@code false}\n     *\n     * @since 1.6\n     */\n    public boolean isEmpty() {\n        return value.length == 0;\n    }\n\n    /**\n     * Returns the {@code char} value at the\n     * specified index. An index ranges from {@code 0} to\n     * {@code length() - 1}. The first {@code char} value of the sequence\n     * is at index {@code 0}, the next at index {@code 1},\n     * and so on, as for array indexing.\n     *\n     * <p>If the {@code char} value specified by the index is a\n     * <a href="Character.html#unicode">surrogate</a>, the surrogate\n     * value is returned.\n     *\n     * @param      index   the index of the {@code char} value.\n     * @return     the {@code char} value at the specified index of this string.\n     *             The first {@code char} value is at index {@code 0}.\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     */\n    public char charAt(int index) {\n        if ((index < 0) || (index >= value.length)) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        return value[index];\n    }\n\n    /**\n     * Returns the character (Unicode code point) at the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 0} to\n     * {@link #length()}{@code  - 1}.\n     *\n     * <p> If the {@code char} value specified at the given index\n     * is in the high-surrogate range, the following index is less\n     * than the length of this {@code String}, and the\n     * {@code char} value at the following index is in the\n     * low-surrogate range, then the supplementary code point\n     * corresponding to this surrogate pair is returned. Otherwise,\n     * the {@code char} value at the given index is returned.\n     *\n     * @param      index the index to the {@code char} values\n     * @return     the code point value of the character at the\n     *             {@code index}\n     * @exception  IndexOutOfBoundsException  if the {@code index}\n     *             argument is negative or not less than the length of this\n     *             string.\n     * @since      1.5\n     */\n    public int codePointAt(int index) {\n        if ((index < 0) || (index >= value.length)) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        return Character.codePointAtImpl(value, index, value.length);\n    }\n\n    /**\n     * Returns the character (Unicode code point) before the specified\n     * index. The index refers to {@code char} values\n     * (Unicode code units) and ranges from {@code 1} to {@link\n     * CharSequence#length() length}.\n     *\n     * <p> If the {@code char} value at {@code (index - 1)}\n     * is in the low-surrogate range, {@code (index - 2)} is not\n     * negative, and the {@code char} value at {@code (index -\n     * 2)} is in the high-surrogate range, then the\n     * supplementary code point value of the surrogate pair is\n     * returned. If the {@code char} value at {@code index -\n     * 1} is an unpaired low-surrogate or a high-surrogate, the\n     * surrogate value is returned.\n     *\n     * @param     index the index following the code point that should be returned\n     * @return    the Unicode code point value before the given index.\n     * @exception IndexOutOfBoundsException if the {@code index}\n     *            argument is less than 1 or greater than the length\n     *            of this string.\n     * @since     1.5\n     */\n    public int codePointBefore(int index) {\n        int i = index - 1;\n        if ((i < 0) || (i >= value.length)) {\n            throw new StringIndexOutOfBoundsException(index);\n        }\n        return Character.codePointBeforeImpl(value, index, 0);\n    }\n\n    /**\n     * Returns the number of Unicode code points in the specified text\n     * range of this {@code String}. The text range begins at the\n     * specified {@code beginIndex} and extends to the\n     * {@code char} at index {@code endIndex - 1}. Thus the\n     * length (in {@code char}s) of the text range is\n     * {@code endIndex-beginIndex}. Unpaired surrogates within\n     * the text range count as one code point each.\n     *\n     * @param beginIndex the index to the first {@code char} of\n     * the text range.\n     * @param endIndex the index after the last {@code char} of\n     * the text range.\n     * @return the number of Unicode code points in the specified text\n     * range\n     * @exception IndexOutOfBoundsException if the\n     * {@code beginIndex} is negative, or {@code endIndex}\n     * is larger than the length of this {@code String}, or\n     * {@code beginIndex} is larger than {@code endIndex}.\n     * @since  1.5\n     */\n    public int codePointCount(int beginIndex, int endIndex) {\n        if (beginIndex < 0 || endIndex > value.length || beginIndex > endIndex) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.codePointCountImpl(value, beginIndex, endIndex - beginIndex);\n    }\n\n    /**\n     * Returns the index within this {@code String} that is\n     * offset from the given {@code index} by\n     * {@code codePointOffset} code points. Unpaired surrogates\n     * within the text range given by {@code index} and\n     * {@code codePointOffset} count as one code point each.\n     *\n     * @param index the index to be offset\n     * @param codePointOffset the offset in code points\n     * @return the index within this {@code String}\n     * @exception IndexOutOfBoundsException if {@code index}\n     *   is negative or larger then the length of this\n     *   {@code String}, or if {@code codePointOffset} is positive\n     *   and the substring starting with {@code index} has fewer\n     *   than {@code codePointOffset} code points,\n     *   or if {@code codePointOffset} is negative and the substring\n     *   before {@code index} has fewer than the absolute value\n     *   of {@code codePointOffset} code points.\n     * @since 1.5\n     */\n    public int offsetByCodePoints(int index, int codePointOffset) {\n        if (index < 0 || index > value.length) {\n            throw new IndexOutOfBoundsException();\n        }\n        return Character.offsetByCodePointsImpl(value, 0, value.length,\n                index, codePointOffset);\n    }\n\n    /**\n     * Copy characters from this string into dst starting at dstBegin.\n     * This method doesn\'t perform any range checking.\n     */\n    void getChars(char dst[], int dstBegin) {\n        System.arraycopy(value, 0, dst, dstBegin, value.length);\n    }\n\n    /**\n     * Copies characters from this string into the destination character\n     * array.\n     * <p>\n     * The first character to be copied is at index {@code srcBegin};\n     * the last character to be copied is at index {@code srcEnd-1}\n     * (thus the total number of characters to be copied is\n     * {@code srcEnd-srcBegin}). The characters are copied into the\n     * subarray of {@code dst} starting at index {@code dstBegin}\n     * and ending at index:\n     * <blockquote><pre>\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * </pre></blockquote>\n     *\n     * @param      srcBegin   index of the first character in the string\n     *                        to copy.\n     * @param      srcEnd     index after the last character in the string\n     *                        to copy.\n     * @param      dst        the destination array.\n     * @param      dstBegin   the start offset in the destination array.\n     * @exception IndexOutOfBoundsException If any of the following\n     *            is true:\n     *            <ul><li>{@code srcBegin} is negative.\n     *            <li>{@code srcBegin} is greater than {@code srcEnd}\n     *            <li>{@code srcEnd} is greater than the length of this\n     *                string\n     *            <li>{@code dstBegin} is negative\n     *            <li>{@code dstBegin+(srcEnd-srcBegin)} is larger than\n     *                {@code dst.length}</ul>\n     */\n    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {\n        if (srcBegin < 0) {\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        }\n        if (srcEnd > value.length) {\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        }\n        if (srcBegin > srcEnd) {\n            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);\n        }\n        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);\n    }\n\n    /**\n     * Copies characters from this string into the destination byte array. Each\n     * byte receives the 8 low-order bits of the corresponding character. The\n     * eight high-order bits of each character are not copied and do not\n     * participate in the transfer in any way.\n     *\n     * <p> The first character to be copied is at index {@code srcBegin}; the\n     * last character to be copied is at index {@code srcEnd-1}.  The total\n     * number of characters to be copied is {@code srcEnd-srcBegin}. The\n     * characters, converted to bytes, are copied into the subarray of {@code\n     * dst} starting at index {@code dstBegin} and ending at index:\n     *\n     * <blockquote><pre>\n     *     dstBegin + (srcEnd-srcBegin) - 1\n     * </pre></blockquote>\n     *\n     * @deprecated  This method does not properly convert characters into\n     * bytes.  As of JDK&nbsp;1.1, the preferred way to do this is via the\n     * {@link #getBytes()} method, which uses the platform\'s default charset.\n     *\n     * @param  srcBegin\n     *         Index of the first character in the string to copy\n     *\n     * @param  srcEnd\n     *         Index after the last character in the string to copy\n     *\n     * @param  dst\n     *         The destination array\n     *\n     * @param  dstBegin\n     *         The start offset in the destination array\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If any of the following is true:\n     *          <ul>\n     *            <li> {@code srcBegin} is negative\n     *            <li> {@code srcBegin} is greater than {@code srcEnd}\n     *            <li> {@code srcEnd} is greater than the length of this String\n     *            <li> {@code dstBegin} is negative\n     *            <li> {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code\n     *                 dst.length}\n     *          </ul>\n     */\n    @Deprecated\n    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {\n        if (srcBegin < 0) {\n            throw new StringIndexOutOfBoundsException(srcBegin);\n        }\n        if (srcEnd > value.length) {\n            throw new StringIndexOutOfBoundsException(srcEnd);\n        }\n        if (srcBegin > srcEnd) {\n            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);\n        }\n        Objects.requireNonNull(dst);\n\n        int j = dstBegin;\n        int n = srcEnd;\n        int i = srcBegin;\n        char[] val = value;   /* avoid getfield opcode */\n\n        while (i < n) {\n            dst[j++] = (byte)val[i++];\n        }\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the named\n     * charset, storing the result into a new byte array.\n     *\n     * <p> The behavior of this method when this string cannot be encoded in\n     * the given charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @param  charsetName\n     *         The name of a supported {@linkplain java.nio.charset.Charset\n     *         charset}\n     *\n     * @return  The resultant byte array\n     *\n     * @throws  UnsupportedEncodingException\n     *          If the named charset is not supported\n     *\n     * @since  JDK1.1\n     */\n    public byte[] getBytes(String charsetName)\n            throws UnsupportedEncodingException {\n        if (charsetName == null) throw new NullPointerException();\n        return StringCoding.encode(charsetName, value, 0, value.length);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the given\n     * {@linkplain java.nio.charset.Charset charset}, storing the result into a\n     * new byte array.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with this charset\'s default replacement byte array.  The\n     * {@link java.nio.charset.CharsetEncoder} class should be used when more\n     * control over the encoding process is required.\n     *\n     * @param  charset\n     *         The {@linkplain java.nio.charset.Charset} to be used to encode\n     *         the {@code String}\n     *\n     * @return  The resultant byte array\n     *\n     * @since  1.6\n     */\n    public byte[] getBytes(Charset charset) {\n        if (charset == null) throw new NullPointerException();\n        return StringCoding.encode(charset, value, 0, value.length);\n    }\n\n    /**\n     * Encodes this {@code String} into a sequence of bytes using the\n     * platform\'s default charset, storing the result into a new byte array.\n     *\n     * <p> The behavior of this method when this string cannot be encoded in\n     * the default charset is unspecified.  The {@link\n     * java.nio.charset.CharsetEncoder} class should be used when more control\n     * over the encoding process is required.\n     *\n     * @return  The resultant byte array\n     *\n     * @since      JDK1.1\n     */\n    public byte[] getBytes() {\n        return StringCoding.encode(value, 0, value.length);\n    }\n\n    /**\n     * Compares this string to the specified object.  The result is {@code\n     * true} if and only if the argument is not {@code null} and is a {@code\n     * String} object that represents the same sequence of characters as this\n     * object.\n     *\n     * @param  anObject\n     *         The object to compare this {@code String} against\n     *\n     * @return  {@code true} if the given object represents a {@code String}\n     *          equivalent to this string, {@code false} otherwise\n     *\n     * @see  #compareTo(String)\n     * @see  #equalsIgnoreCase(String)\n     */\n    public boolean equals(Object anObject) {\n        if (this == anObject) {\n            return true;\n        }\n        if (anObject instanceof String) {\n            String anotherString = (String)anObject;\n            int n = value.length;\n            if (n == anotherString.value.length) {\n                char v1[] = value;\n                char v2[] = anotherString.value;\n                int i = 0;\n                while (n-- != 0) {\n                    if (v1[i] != v2[i])\n                        return false;\n                    i++;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Compares this string to the specified {@code StringBuffer}.  The result\n     * is {@code true} if and only if this {@code String} represents the same\n     * sequence of characters as the specified {@code StringBuffer}. This method\n     * synchronizes on the {@code StringBuffer}.\n     *\n     * @param  sb\n     *         The {@code StringBuffer} to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of characters as the specified {@code StringBuffer},\n     *          {@code false} otherwise\n     *\n     * @since  1.4\n     */\n    public boolean contentEquals(StringBuffer sb) {\n        return contentEquals((CharSequence)sb);\n    }\n\n    private boolean nonSyncContentEquals(AbstractStringBuilder sb) {\n        char v1[] = value;\n        char v2[] = sb.getValue();\n        int n = v1.length;\n        if (n != sb.length()) {\n            return false;\n        }\n        for (int i = 0; i < n; i++) {\n            if (v1[i] != v2[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this string to the specified {@code CharSequence}.  The\n     * result is {@code true} if and only if this {@code String} represents the\n     * same sequence of char values as the specified sequence. Note that if the\n     * {@code CharSequence} is a {@code StringBuffer} then the method\n     * synchronizes on it.\n     *\n     * @param  cs\n     *         The sequence to compare this {@code String} against\n     *\n     * @return  {@code true} if this {@code String} represents the same\n     *          sequence of char values as the specified sequence, {@code\n     *          false} otherwise\n     *\n     * @since  1.5\n     */\n    public boolean contentEquals(CharSequence cs) {\n        // Argument is a StringBuffer, StringBuilder\n        if (cs instanceof AbstractStringBuilder) {\n            if (cs instanceof StringBuffer) {\n                synchronized(cs) {\n                   return nonSyncContentEquals((AbstractStringBuilder)cs);\n                }\n            } else {\n                return nonSyncContentEquals((AbstractStringBuilder)cs);\n            }\n        }\n        // Argument is a String\n        if (cs instanceof String) {\n            return equals(cs);\n        }\n        // Argument is a generic CharSequence\n        char v1[] = value;\n        int n = v1.length;\n        if (n != cs.length()) {\n            return false;\n        }\n        for (int i = 0; i < n; i++) {\n            if (v1[i] != cs.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Compares this {@code String} to another {@code String}, ignoring case\n     * considerations.  Two strings are considered equal ignoring case if they\n     * are of the same length and corresponding characters in the two strings\n     * are equal ignoring case.\n     *\n     * <p> Two characters {@code c1} and {@code c2} are considered the same\n     * ignoring case if at least one of the following is true:\n     * <ul>\n     *   <li> The two characters are the same (as compared by the\n     *        {@code ==} operator)\n     *   <li> Applying the method {@link\n     *        java.lang.Character#toUpperCase(char)} to each character\n     *        produces the same result\n     *   <li> Applying the method {@link\n     *        java.lang.Character#toLowerCase(char)} to each character\n     *        produces the same result\n     * </ul>\n     *\n     * @param  anotherString\n     *         The {@code String} to compare this {@code String} against\n     *\n     * @return  {@code true} if the argument is not {@code null} and it\n     *          represents an equivalent {@code String} ignoring case; {@code\n     *          false} otherwise\n     *\n     * @see  #equals(Object)\n     */\n    public boolean equalsIgnoreCase(String anotherString) {\n        return (this == anotherString) ? true\n                : (anotherString != null)\n                && (anotherString.value.length == value.length)\n                && regionMatches(true, 0, anotherString, 0, value.length);\n    }\n\n    /**\n     * Compares two strings lexicographically.\n     * The comparison is based on the Unicode value of each character in\n     * the strings. The character sequence represented by this\n     * {@code String} object is compared lexicographically to the\n     * character sequence represented by the argument string. The result is\n     * a negative integer if this {@code String} object\n     * lexicographically precedes the argument string. The result is a\n     * positive integer if this {@code String} object lexicographically\n     * follows the argument string. The result is zero if the strings\n     * are equal; {@code compareTo} returns {@code 0} exactly when\n     * the {@link #equals(Object)} method would return {@code true}.\n     * <p>\n     * This is the definition of lexicographic ordering. If two strings are\n     * different, then either they have different characters at some index\n     * that is a valid index for both strings, or their lengths are different,\n     * or both. If they have different characters at one or more index\n     * positions, let <i>k</i> be the smallest such index; then the string\n     * whose character at position <i>k</i> has the smaller value, as\n     * determined by using the &lt; operator, lexicographically precedes the\n     * other string. In this case, {@code compareTo} returns the\n     * difference of the two character values at position {@code k} in\n     * the two string -- that is, the value:\n     * <blockquote><pre>\n     * this.charAt(k)-anotherString.charAt(k)\n     * </pre></blockquote>\n     * If there is no index position at which they differ, then the shorter\n     * string lexicographically precedes the longer string. In this case,\n     * {@code compareTo} returns the difference of the lengths of the\n     * strings -- that is, the value:\n     * <blockquote><pre>\n     * this.length()-anotherString.length()\n     * </pre></blockquote>\n     *\n     * @param   anotherString   the {@code String} to be compared.\n     * @return  the value {@code 0} if the argument string is equal to\n     *          this string; a value less than {@code 0} if this string\n     *          is lexicographically less than the string argument; and a\n     *          value greater than {@code 0} if this string is\n     *          lexicographically greater than the string argument.\n     */\n    public int compareTo(String anotherString) {\n        int len1 = value.length;\n        int len2 = anotherString.value.length;\n        int lim = Math.min(len1, len2);\n        char v1[] = value;\n        char v2[] = anotherString.value;\n\n        int k = 0;\n        while (k < lim) {\n            char c1 = v1[k];\n            char c2 = v2[k];\n            if (c1 != c2) {\n                return c1 - c2;\n            }\n            k++;\n        }\n        return len1 - len2;\n    }\n\n    /**\n     * A Comparator that orders {@code String} objects as by\n     * {@code compareToIgnoreCase}. This comparator is serializable.\n     * <p>\n     * Note that this Comparator does <em>not</em> take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The java.text package provides <em>Collators</em> to allow\n     * locale-sensitive ordering.\n     *\n     * @see     java.text.Collator#compare(String, String)\n     * @since   1.2\n     */\n    public static final Comparator<String> CASE_INSENSITIVE_ORDER\n                                         = new CaseInsensitiveComparator();\n    private static class CaseInsensitiveComparator\n            implements Comparator<String>, java.io.Serializable {\n        // use serialVersionUID from JDK 1.2.2 for interoperability\n        private static final long serialVersionUID = 8575799808933029326L;\n\n        public int compare(String s1, String s2) {\n            int n1 = s1.length();\n            int n2 = s2.length();\n            int min = Math.min(n1, n2);\n            for (int i = 0; i < min; i++) {\n                char c1 = s1.charAt(i);\n                char c2 = s2.charAt(i);\n                if (c1 != c2) {\n                    c1 = Character.toUpperCase(c1);\n                    c2 = Character.toUpperCase(c2);\n                    if (c1 != c2) {\n                        c1 = Character.toLowerCase(c1);\n                        c2 = Character.toLowerCase(c2);\n                        if (c1 != c2) {\n                            // No overflow because of numeric promotion\n                            return c1 - c2;\n                        }\n                    }\n                }\n            }\n            return n1 - n2;\n        }\n\n        /** Replaces the de-serialized object. */\n        private Object readResolve() { return CASE_INSENSITIVE_ORDER; }\n    }\n\n    /**\n     * Compares two strings lexicographically, ignoring case\n     * differences. This method returns an integer whose sign is that of\n     * calling {@code compareTo} with normalized versions of the strings\n     * where case differences have been eliminated by calling\n     * {@code Character.toLowerCase(Character.toUpperCase(character))} on\n     * each character.\n     * <p>\n     * Note that this method does <em>not</em> take locale into account,\n     * and will result in an unsatisfactory ordering for certain locales.\n     * The java.text package provides <em>collators</em> to allow\n     * locale-sensitive ordering.\n     *\n     * @param   str   the {@code String} to be compared.\n     * @return  a negative integer, zero, or a positive integer as the\n     *          specified String is greater than, equal to, or less\n     *          than this String, ignoring case considerations.\n     * @see     java.text.Collator#compare(String, String)\n     * @since   1.2\n     */\n    public int compareToIgnoreCase(String str) {\n        return CASE_INSENSITIVE_ORDER.compare(this, str);\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * <p>\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument other. The result is true if these substrings\n     * represent identical character sequences. The substring of this\n     * {@code String} object to be compared begins at index {@code toffset}\n     * and has length {@code len}. The substring of other to be compared\n     * begins at index {@code ooffset} and has length {@code len}. The\n     * result is {@code false} if and only if at least one of the following\n     * is true:\n     * <ul><li>{@code toffset} is negative.\n     * <li>{@code ooffset} is negative.\n     * <li>{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * <li>{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * <li>There is some nonnegative integer <i>k</i> less than {@code len}\n     * such that:\n     * {@code this.charAt(toffset + }<i>k</i>{@code ) != other.charAt(ooffset + }\n     * <i>k</i>{@code )}\n     * </ul>\n     *\n     * @param   toffset   the starting offset of the subregion in this string.\n     * @param   other     the string argument.\n     * @param   ooffset   the starting offset of the subregion in the string\n     *                    argument.\n     * @param   len       the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          exactly matches the specified subregion of the string argument;\n     *          {@code false} otherwise.\n     */\n    public boolean regionMatches(int toffset, String other, int ooffset,\n            int len) {\n        char ta[] = value;\n        int to = toffset;\n        char pa[] = other.value;\n        int po = ooffset;\n        // Note: toffset, ooffset, or len might be near -1>>>1.\n        if ((ooffset < 0) || (toffset < 0)\n                || (toffset > (long)value.length - len)\n                || (ooffset > (long)other.value.length - len)) {\n            return false;\n        }\n        while (len-- > 0) {\n            if (ta[to++] != pa[po++]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if two string regions are equal.\n     * <p>\n     * A substring of this {@code String} object is compared to a substring\n     * of the argument {@code other}. The result is {@code true} if these\n     * substrings represent character sequences that are the same, ignoring\n     * case if and only if {@code ignoreCase} is true. The substring of\n     * this {@code String} object to be compared begins at index\n     * {@code toffset} and has length {@code len}. The substring of\n     * {@code other} to be compared begins at index {@code ooffset} and\n     * has length {@code len}. The result is {@code false} if and only if\n     * at least one of the following is true:\n     * <ul><li>{@code toffset} is negative.\n     * <li>{@code ooffset} is negative.\n     * <li>{@code toffset+len} is greater than the length of this\n     * {@code String} object.\n     * <li>{@code ooffset+len} is greater than the length of the other\n     * argument.\n     * <li>{@code ignoreCase} is {@code false} and there is some nonnegative\n     * integer <i>k</i> less than {@code len} such that:\n     * <blockquote><pre>\n     * this.charAt(toffset+k) != other.charAt(ooffset+k)\n     * </pre></blockquote>\n     * <li>{@code ignoreCase} is {@code true} and there is some nonnegative\n     * integer <i>k</i> less than {@code len} such that:\n     * <blockquote><pre>\n     * Character.toLowerCase(this.charAt(toffset+k)) !=\n     Character.toLowerCase(other.charAt(ooffset+k))\n     * </pre></blockquote>\n     * and:\n     * <blockquote><pre>\n     * Character.toUpperCase(this.charAt(toffset+k)) !=\n     *         Character.toUpperCase(other.charAt(ooffset+k))\n     * </pre></blockquote>\n     * </ul>\n     *\n     * @param   ignoreCase   if {@code true}, ignore case when comparing\n     *                       characters.\n     * @param   toffset      the starting offset of the subregion in this\n     *                       string.\n     * @param   other        the string argument.\n     * @param   ooffset      the starting offset of the subregion in the string\n     *                       argument.\n     * @param   len          the number of characters to compare.\n     * @return  {@code true} if the specified subregion of this string\n     *          matches the specified subregion of the string argument;\n     *          {@code false} otherwise. Whether the matching is exact\n     *          or case insensitive depends on the {@code ignoreCase}\n     *          argument.\n     */\n    public boolean regionMatches(boolean ignoreCase, int toffset,\n            String other, int ooffset, int len) {\n        char ta[] = value;\n        int to = toffset;\n        char pa[] = other.value;\n        int po = ooffset;\n        // Note: toffset, ooffset, or len might be near -1>>>1.\n        if ((ooffset < 0) || (toffset < 0)\n                || (toffset > (long)value.length - len)\n                || (ooffset > (long)other.value.length - len)) {\n            return false;\n        }\n        while (len-- > 0) {\n            char c1 = ta[to++];\n            char c2 = pa[po++];\n            if (c1 == c2) {\n                continue;\n            }\n            if (ignoreCase) {\n                // If characters don\'t match but case may be ignored,\n                // try converting both characters to uppercase.\n                // If the results match, then the comparison scan should\n                // continue.\n                char u1 = Character.toUpperCase(c1);\n                char u2 = Character.toUpperCase(c2);\n                if (u1 == u2) {\n                    continue;\n                }\n                // Unfortunately, conversion to uppercase does not work properly\n                // for the Georgian alphabet, which has strange rules about case\n                // conversion.  So we need to make one last check before\n                // exiting.\n                if (Character.toLowerCase(u1) == Character.toLowerCase(u2)) {\n                    continue;\n                }\n            }\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Tests if the substring of this string beginning at the\n     * specified index starts with the specified prefix.\n     *\n     * @param   prefix    the prefix.\n     * @param   toffset   where to begin looking in this string.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the substring of this object starting\n     *          at index {@code toffset}; {@code false} otherwise.\n     *          The result is {@code false} if {@code toffset} is\n     *          negative or greater than the length of this\n     *          {@code String} object; otherwise the result is the same\n     *          as the result of the expression\n     *          <pre>\n     *          this.substring(toffset).startsWith(prefix)\n     *          </pre>\n     */\n    public boolean startsWith(String prefix, int toffset) {\n        char ta[] = value;\n        int to = toffset;\n        char pa[] = prefix.value;\n        int po = 0;\n        int pc = prefix.value.length;\n        // Note: toffset might be near -1>>>1.\n        if ((toffset < 0) || (toffset > value.length - pc)) {\n            return false;\n        }\n        while (--pc >= 0) {\n            if (ta[to++] != pa[po++]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Tests if this string starts with the specified prefix.\n     *\n     * @param   prefix   the prefix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a prefix of the character sequence represented by\n     *          this string; {@code false} otherwise.\n     *          Note also that {@code true} will be returned if the\n     *          argument is an empty string or is equal to this\n     *          {@code String} object as determined by the\n     *          {@link #equals(Object)} method.\n     * @since   1. 0\n     */\n    public boolean startsWith(String prefix) {\n        return startsWith(prefix, 0);\n    }\n\n    /**\n     * Tests if this string ends with the specified suffix.\n     *\n     * @param   suffix   the suffix.\n     * @return  {@code true} if the character sequence represented by the\n     *          argument is a suffix of the character sequence represented by\n     *          this object; {@code false} otherwise. Note that the\n     *          result will be {@code true} if the argument is the\n     *          empty string or is equal to this {@code String} object\n     *          as determined by the {@link #equals(Object)} method.\n     */\n    public boolean endsWith(String suffix) {\n        return startsWith(suffix, value.length - suffix.value.length);\n    }\n\n    /**\n     * Returns a hash code for this string. The hash code for a\n     * {@code String} object is computed as\n     * <blockquote><pre>\n     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n     * </pre></blockquote>\n     * using {@code int} arithmetic, where {@code s[i]} is the\n     * <i>i</i>th character of the string, {@code n} is the length of\n     * the string, and {@code ^} indicates exponentiation.\n     * (The hash value of the empty string is zero.)\n     *\n     * @return  a hash code value for this object.\n     */\n    public int hashCode() {\n        int h = hash;\n        if (h == 0 && value.length > 0) {\n            char val[] = value;\n\n            for (int i = 0; i < value.length; i++) {\n                h = 31 * h + val[i];\n            }\n            hash = h;\n        }\n        return h;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of\n     * the specified character. If a character with value\n     * {@code ch} occurs in the character sequence represented by\n     * this {@code String} object, then the index (in Unicode\n     * code units) of the first such occurrence is returned. For\n     * values of {@code ch} in the range from 0 to 0xFFFF\n     * (inclusive), this is the smallest value <i>k</i> such that:\n     * <blockquote><pre>\n     * this.charAt(<i>k</i>) == ch\n     * </pre></blockquote>\n     * is true. For other values of {@code ch}, it is the\n     * smallest value <i>k</i> such that:\n     * <blockquote><pre>\n     * this.codePointAt(<i>k</i>) == ch\n     * </pre></blockquote>\n     * is true. In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int indexOf(int ch) {\n        return indexOf(ch, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified character, starting the search at the specified index.\n     * <p>\n     * If a character with value {@code ch} occurs in the\n     * character sequence represented by this {@code String}\n     * object at an index no smaller than {@code fromIndex}, then\n     * the index of the first such occurrence is returned. For values\n     * of {@code ch} in the range from 0 to 0xFFFF (inclusive),\n     * this is the smallest value <i>k</i> such that:\n     * <blockquote><pre>\n     * (this.charAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &gt;= fromIndex)\n     * </pre></blockquote>\n     * is true. For other values of {@code ch}, it is the\n     * smallest value <i>k</i> such that:\n     * <blockquote><pre>\n     * (this.codePointAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &gt;= fromIndex)\n     * </pre></blockquote>\n     * is true. In either case, if no such character occurs in this\n     * string at or after position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * <p>\n     * There is no restriction on the value of {@code fromIndex}. If it\n     * is negative, it has the same effect as if it were zero: this entire\n     * string may be searched. If it is greater than the length of this\n     * string, it has the same effect as if it were equal to the length of\n     * this string: {@code -1} is returned.\n     *\n     * <p>All indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the first occurrence of the character in the\n     *          character sequence represented by this object that is greater\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur.\n     */\n    public int indexOf(int ch, int fromIndex) {\n        final int max = value.length;\n        if (fromIndex < 0) {\n            fromIndex = 0;\n        } else if (fromIndex >= max) {\n            // Note: fromIndex might be near -1>>>1.\n            return -1;\n        }\n\n        if (ch < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            // handle most cases here (ch is a BMP code point or a\n            // negative value (invalid code point))\n            final char[] value = this.value;\n            for (int i = fromIndex; i < max; i++) {\n                if (value[i] == ch) {\n                    return i;\n                }\n            }\n            return -1;\n        } else {\n            return indexOfSupplementary(ch, fromIndex);\n        }\n    }\n\n    /**\n     * Handles (rare) calls of indexOf with a supplementary character.\n     */\n    private int indexOfSupplementary(int ch, int fromIndex) {\n        if (Character.isValidCodePoint(ch)) {\n            final char[] value = this.value;\n            final char hi = Character.highSurrogate(ch);\n            final char lo = Character.lowSurrogate(ch);\n            final int max = value.length - 1;\n            for (int i = fromIndex; i < max; i++) {\n                if (value[i] == hi && value[i + 1] == lo) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character. For values of {@code ch} in the\n     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code\n     * units) returned is the largest value <i>k</i> such that:\n     * <blockquote><pre>\n     * this.charAt(<i>k</i>) == ch\n     * </pre></blockquote>\n     * is true. For other values of {@code ch}, it is the\n     * largest value <i>k</i> such that:\n     * <blockquote><pre>\n     * this.codePointAt(<i>k</i>) == ch\n     * </pre></blockquote>\n     * is true.  In either case, if no such character occurs in this\n     * string, then {@code -1} is returned.  The\n     * {@code String} is searched backwards starting at the last\n     * character.\n     *\n     * @param   ch   a character (Unicode code point).\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object, or\n     *          {@code -1} if the character does not occur.\n     */\n    public int lastIndexOf(int ch) {\n        return lastIndexOf(ch, value.length - 1);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of\n     * the specified character, searching backward starting at the\n     * specified index. For values of {@code ch} in the range\n     * from 0 to 0xFFFF (inclusive), the index returned is the largest\n     * value <i>k</i> such that:\n     * <blockquote><pre>\n     * (this.charAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &lt;= fromIndex)\n     * </pre></blockquote>\n     * is true. For other values of {@code ch}, it is the\n     * largest value <i>k</i> such that:\n     * <blockquote><pre>\n     * (this.codePointAt(<i>k</i>) == ch) {@code &&} (<i>k</i> &lt;= fromIndex)\n     * </pre></blockquote>\n     * is true. In either case, if no such character occurs in this\n     * string at or before position {@code fromIndex}, then\n     * {@code -1} is returned.\n     *\n     * <p>All indices are specified in {@code char} values\n     * (Unicode code units).\n     *\n     * @param   ch          a character (Unicode code point).\n     * @param   fromIndex   the index to start the search from. There is no\n     *          restriction on the value of {@code fromIndex}. If it is\n     *          greater than or equal to the length of this string, it has\n     *          the same effect as if it were equal to one less than the\n     *          length of this string: this entire string may be searched.\n     *          If it is negative, it has the same effect as if it were -1:\n     *          -1 is returned.\n     * @return  the index of the last occurrence of the character in the\n     *          character sequence represented by this object that is less\n     *          than or equal to {@code fromIndex}, or {@code -1}\n     *          if the character does not occur before that point.\n     */\n    public int lastIndexOf(int ch, int fromIndex) {\n        if (ch < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n            // handle most cases here (ch is a BMP code point or a\n            // negative value (invalid code point))\n            final char[] value = this.value;\n            int i = Math.min(fromIndex, value.length - 1);\n            for (; i >= 0; i--) {\n                if (value[i] == ch) {\n                    return i;\n                }\n            }\n            return -1;\n        } else {\n            return lastIndexOfSupplementary(ch, fromIndex);\n        }\n    }\n\n    /**\n     * Handles (rare) calls of lastIndexOf with a supplementary character.\n     */\n    private int lastIndexOfSupplementary(int ch, int fromIndex) {\n        if (Character.isValidCodePoint(ch)) {\n            final char[] value = this.value;\n            char hi = Character.highSurrogate(ch);\n            char lo = Character.lowSurrogate(ch);\n            int i = Math.min(fromIndex, value.length - 2);\n            for (; i >= 0; i--) {\n                if (value[i] == hi && value[i + 1] == lo) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring.\n     *\n     * <p>The returned index is the smallest value <i>k</i> for which:\n     * <blockquote><pre>\n     * this.startsWith(str, <i>k</i>)\n     * </pre></blockquote>\n     * If no such value of <i>k</i> exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the first occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str) {\n        return indexOf(str, 0);\n    }\n\n    /**\n     * Returns the index within this string of the first occurrence of the\n     * specified substring, starting at the specified index.\n     *\n     * <p>The returned index is the smallest value <i>k</i> for which:\n     * <blockquote><pre>\n     * <i>k</i> &gt;= fromIndex {@code &&} this.startsWith(str, <i>k</i>)\n     * </pre></blockquote>\n     * If no such value of <i>k</i> exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index from which to start the search.\n     * @return  the index of the first occurrence of the specified substring,\n     *          starting at the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int indexOf(String str, int fromIndex) {\n        return indexOf(value, 0, value.length,\n                str.value, 0, str.value.length, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   fromIndex    the index to begin searching from.\n     */\n    static int indexOf(char[] source, int sourceOffset, int sourceCount,\n            String target, int fromIndex) {\n        return indexOf(source, sourceOffset, sourceCount,\n                       target.value, 0, target.value.length,\n                       fromIndex);\n    }\n\n    /**\n     * Code shared by String and StringBuffer to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   targetOffset offset of the target string.\n     * @param   targetCount  count of the target string.\n     * @param   fromIndex    the index to begin searching from.\n     */\n    static int indexOf(char[] source, int sourceOffset, int sourceCount,\n            char[] target, int targetOffset, int targetCount,\n            int fromIndex) {\n        if (fromIndex >= sourceCount) {\n            return (targetCount == 0 ? sourceCount : -1);\n        }\n        if (fromIndex < 0) {\n            fromIndex = 0;\n        }\n        if (targetCount == 0) {\n            return fromIndex;\n        }\n\n        char first = target[targetOffset];\n        int max = sourceOffset + (sourceCount - targetCount);\n\n        for (int i = sourceOffset + fromIndex; i <= max; i++) {\n            /* Look for first character. */\n            if (source[i] != first) {\n                while (++i <= max && source[i] != first);\n            }\n\n            /* Found first character, now look at the rest of v2 */\n            if (i <= max) {\n                int j = i + 1;\n                int end = j + targetCount - 1;\n                for (int k = targetOffset + 1; j < end && source[j]\n                        == target[k]; j++, k++);\n\n                if (j == end) {\n                    /* Found whole string. */\n                    return i - sourceOffset;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring.  The last occurrence of the empty string ""\n     * is considered to occur at the index value {@code this.length()}.\n     *\n     * <p>The returned index is the largest value <i>k</i> for which:\n     * <blockquote><pre>\n     * this.startsWith(str, <i>k</i>)\n     * </pre></blockquote>\n     * If no such value of <i>k</i> exists, then {@code -1} is returned.\n     *\n     * @param   str   the substring to search for.\n     * @return  the index of the last occurrence of the specified substring,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str) {\n        return lastIndexOf(str, value.length);\n    }\n\n    /**\n     * Returns the index within this string of the last occurrence of the\n     * specified substring, searching backward starting at the specified index.\n     *\n     * <p>The returned index is the largest value <i>k</i> for which:\n     * <blockquote><pre>\n     * <i>k</i> {@code <=} fromIndex {@code &&} this.startsWith(str, <i>k</i>)\n     * </pre></blockquote>\n     * If no such value of <i>k</i> exists, then {@code -1} is returned.\n     *\n     * @param   str         the substring to search for.\n     * @param   fromIndex   the index to start the search from.\n     * @return  the index of the last occurrence of the specified substring,\n     *          searching backward from the specified index,\n     *          or {@code -1} if there is no such occurrence.\n     */\n    public int lastIndexOf(String str, int fromIndex) {\n        return lastIndexOf(value, 0, value.length,\n                str.value, 0, str.value.length, fromIndex);\n    }\n\n    /**\n     * Code shared by String and AbstractStringBuilder to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   fromIndex    the index to begin searching from.\n     */\n    static int lastIndexOf(char[] source, int sourceOffset, int sourceCount,\n            String target, int fromIndex) {\n        return lastIndexOf(source, sourceOffset, sourceCount,\n                       target.value, 0, target.value.length,\n                       fromIndex);\n    }\n\n    /**\n     * Code shared by String and StringBuffer to do searches. The\n     * source is the character array being searched, and the target\n     * is the string being searched for.\n     *\n     * @param   source       the characters being searched.\n     * @param   sourceOffset offset of the source string.\n     * @param   sourceCount  count of the source string.\n     * @param   target       the characters being searched for.\n     * @param   targetOffset offset of the target string.\n     * @param   targetCount  count of the target string.\n     * @param   fromIndex    the index to begin searching from.\n     */\n    static int lastIndexOf(char[] source, int sourceOffset, int sourceCount,\n            char[] target, int targetOffset, int targetCount,\n            int fromIndex) {\n        /*\n         * Check arguments; return immediately where possible. For\n         * consistency, don\'t check for null str.\n         */\n        int rightIndex = sourceCount - targetCount;\n        if (fromIndex < 0) {\n            return -1;\n        }\n        if (fromIndex > rightIndex) {\n            fromIndex = rightIndex;\n        }\n        /* Empty string always matches. */\n        if (targetCount == 0) {\n            return fromIndex;\n        }\n\n        int strLastIndex = targetOffset + targetCount - 1;\n        char strLastChar = target[strLastIndex];\n        int min = sourceOffset + targetCount - 1;\n        int i = min + fromIndex;\n\n    startSearchForLastChar:\n        while (true) {\n            while (i >= min && source[i] != strLastChar) {\n                i--;\n            }\n            if (i < min) {\n                return -1;\n            }\n            int j = i - 1;\n            int start = j - (targetCount - 1);\n            int k = strLastIndex - 1;\n\n            while (j > start) {\n                if (source[j--] != target[k--]) {\n                    i--;\n                    continue startSearchForLastChar;\n                }\n            }\n            return start - sourceOffset + 1;\n        }\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins with the character at the specified index and\n     * extends to the end of this string. <p>\n     * Examples:\n     * <blockquote><pre>\n     * "unhappy".substring(2) returns "happy"\n     * "Harbison".substring(3) returns "bison"\n     * "emptiness".substring(9) returns "" (an empty string)\n     * </pre></blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if\n     *             {@code beginIndex} is negative or larger than the\n     *             length of this {@code String} object.\n     */\n    public String substring(int beginIndex) {\n        if (beginIndex < 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        int subLen = value.length - beginIndex;\n        if (subLen < 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a string that is a substring of this string. The\n     * substring begins at the specified {@code beginIndex} and\n     * extends to the character at index {@code endIndex - 1}.\n     * Thus the length of the substring is {@code endIndex-beginIndex}.\n     * <p>\n     * Examples:\n     * <blockquote><pre>\n     * "hamburger".substring(4, 8) returns "urge"\n     * "smiles".substring(1, 5) returns "mile"\n     * </pre></blockquote>\n     *\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @return     the specified substring.\n     * @exception  IndexOutOfBoundsException  if the\n     *             {@code beginIndex} is negative, or\n     *             {@code endIndex} is larger than the length of\n     *             this {@code String} object, or\n     *             {@code beginIndex} is larger than\n     *             {@code endIndex}.\n     */\n    public String substring(int beginIndex, int endIndex) {\n        if (beginIndex < 0) {\n            throw new StringIndexOutOfBoundsException(beginIndex);\n        }\n        if (endIndex > value.length) {\n            throw new StringIndexOutOfBoundsException(endIndex);\n        }\n        int subLen = endIndex - beginIndex;\n        if (subLen < 0) {\n            throw new StringIndexOutOfBoundsException(subLen);\n        }\n        return ((beginIndex == 0) && (endIndex == value.length)) ? this\n                : new String(value, beginIndex, subLen);\n    }\n\n    /**\n     * Returns a character sequence that is a subsequence of this sequence.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <blockquote><pre>\n     * str.subSequence(begin,&nbsp;end)</pre></blockquote>\n     *\n     * behaves in exactly the same way as the invocation\n     *\n     * <blockquote><pre>\n     * str.substring(begin,&nbsp;end)</pre></blockquote>\n     *\n     * @apiNote\n     * This method is defined so that the {@code String} class can implement\n     * the {@link CharSequence} interface.\n     *\n     * @param   beginIndex   the begin index, inclusive.\n     * @param   endIndex     the end index, exclusive.\n     * @return  the specified subsequence.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          if {@code beginIndex} or {@code endIndex} is negative,\n     *          if {@code endIndex} is greater than {@code length()},\n     *          or if {@code beginIndex} is greater than {@code endIndex}\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public CharSequence subSequence(int beginIndex, int endIndex) {\n        return this.substring(beginIndex, endIndex);\n    }\n\n    /**\n     * Concatenates the specified string to the end of this string.\n     * <p>\n     * If the length of the argument string is {@code 0}, then this\n     * {@code String} object is returned. Otherwise, a\n     * {@code String} object is returned that represents a character\n     * sequence that is the concatenation of the character sequence\n     * represented by this {@code String} object and the character\n     * sequence represented by the argument string.<p>\n     * Examples:\n     * <blockquote><pre>\n     * "cares".concat("s") returns "caress"\n     * "to".concat("get").concat("her") returns "together"\n     * </pre></blockquote>\n     *\n     * @param   str   the {@code String} that is concatenated to the end\n     *                of this {@code String}.\n     * @return  a string that represents the concatenation of this object\'s\n     *          characters followed by the string argument\'s characters.\n     */\n    public String concat(String str) {\n        int otherLen = str.length();\n        if (otherLen == 0) {\n            return this;\n        }\n        int len = value.length;\n        char buf[] = Arrays.copyOf(value, len + otherLen);\n        str.getChars(buf, len);\n        return new String(buf, true);\n    }\n\n    /**\n     * Returns a string resulting from replacing all occurrences of\n     * {@code oldChar} in this string with {@code newChar}.\n     * <p>\n     * If the character {@code oldChar} does not occur in the\n     * character sequence represented by this {@code String} object,\n     * then a reference to this {@code String} object is returned.\n     * Otherwise, a {@code String} object is returned that\n     * represents a character sequence identical to the character sequence\n     * represented by this {@code String} object, except that every\n     * occurrence of {@code oldChar} is replaced by an occurrence\n     * of {@code newChar}.\n     * <p>\n     * Examples:\n     * <blockquote><pre>\n     * "mesquite in your cellar".replace(\'e\', \'o\')\n     *         returns "mosquito in your collar"\n     * "the war of baronets".replace(\'r\', \'y\')\n     *         returns "the way of bayonets"\n     * "sparring with a purple porpoise".replace(\'p\', \'t\')\n     *         returns "starring with a turtle tortoise"\n     * "JonL".replace(\'q\', \'x\') returns "JonL" (no change)\n     * </pre></blockquote>\n     *\n     * @param   oldChar   the old character.\n     * @param   newChar   the new character.\n     * @return  a string derived from this string by replacing every\n     *          occurrence of {@code oldChar} with {@code newChar}.\n     */\n    public String replace(char oldChar, char newChar) {\n        if (oldChar != newChar) {\n            int len = value.length;\n            int i = -1;\n            char[] val = value; /* avoid getfield opcode */\n\n            while (++i < len) {\n                if (val[i] == oldChar) {\n                    break;\n                }\n            }\n            if (i < len) {\n                char buf[] = new char[len];\n                for (int j = 0; j < i; j++) {\n                    buf[j] = val[j];\n                }\n                while (i < len) {\n                    char c = val[i];\n                    buf[i] = (c == oldChar) ? newChar : c;\n                    i++;\n                }\n                return new String(buf, true);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Tells whether or not this string matches the given <a\n     * href="../util/regex/Pattern.html#sum">regular expression</a>.\n     *\n     * <p> An invocation of this method of the form\n     * <i>str</i>{@code .matches(}<i>regex</i>{@code )} yields exactly the\n     * same result as the expression\n     *\n     * <blockquote>\n     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#matches(String,CharSequence)\n     * matches(<i>regex</i>, <i>str</i>)}\n     * </blockquote>\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     *\n     * @return  {@code true} if, and only if, this string matches the\n     *          given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\'s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public boolean matches(String regex) {\n        return Pattern.matches(regex, this);\n    }\n\n    /**\n     * Returns true if and only if this string contains the specified\n     * sequence of char values.\n     *\n     * @param s the sequence to search for\n     * @return true if this string contains {@code s}, false otherwise\n     * @since 1.5\n     */\n    public boolean contains(CharSequence s) {\n        return indexOf(s.toString()) > -1;\n    }\n\n    /**\n     * Replaces the first substring of this string that matches the given <a\n     * href="../util/regex/Pattern.html#sum">regular expression</a> with the\n     * given replacement.\n     *\n     * <p> An invocation of this method of the form\n     * <i>str</i>{@code .replaceFirst(}<i>regex</i>{@code ,} <i>repl</i>{@code )}\n     * yields exactly the same result as the expression\n     *\n     * <blockquote>\n     * <code>\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(<i>regex</i>).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(<i>str</i>).{@link\n     * java.util.regex.Matcher#replaceFirst replaceFirst}(<i>repl</i>)\n     * </code>\n     * </blockquote>\n     *\n     *<p>\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceFirst}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for the first match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\'s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceFirst(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the given <a\n     * href="../util/regex/Pattern.html#sum">regular expression</a> with the\n     * given replacement.\n     *\n     * <p> An invocation of this method of the form\n     * <i>str</i>{@code .replaceAll(}<i>regex</i>{@code ,} <i>repl</i>{@code )}\n     * yields exactly the same result as the expression\n     *\n     * <blockquote>\n     * <code>\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(<i>regex</i>).{@link\n     * java.util.regex.Pattern#matcher(java.lang.CharSequence) matcher}(<i>str</i>).{@link\n     * java.util.regex.Matcher#replaceAll replaceAll}(<i>repl</i>)\n     * </code>\n     * </blockquote>\n     *\n     *<p>\n     * Note that backslashes ({@code \\}) and dollar signs ({@code $}) in the\n     * replacement string may cause the results to be different than if it were\n     * being treated as a literal replacement string; see\n     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.\n     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n     * meaning of these characters, if desired.\n     *\n     * @param   regex\n     *          the regular expression to which this string is to be matched\n     * @param   replacement\n     *          the string to be substituted for each match\n     *\n     * @return  The resulting {@code String}\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\'s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String replaceAll(String regex, String replacement) {\n        return Pattern.compile(regex).matcher(this).replaceAll(replacement);\n    }\n\n    /**\n     * Replaces each substring of this string that matches the literal target\n     * sequence with the specified literal replacement sequence. The\n     * replacement proceeds from the beginning of the string to the end, for\n     * example, replacing "aa" with "b" in the string "aaa" will result in\n     * "ba" rather than "ab".\n     *\n     * @param  target The sequence of char values to be replaced\n     * @param  replacement The replacement sequence of char values\n     * @return  The resulting string\n     * @since 1.5\n     */\n    public String replace(CharSequence target, CharSequence replacement) {\n        return Pattern.compile(target.toString(), Pattern.LITERAL).matcher(\n                this).replaceAll(Matcher.quoteReplacement(replacement.toString()));\n    }\n\n    /**\n     * Splits this string around matches of the given\n     * <a href="../util/regex/Pattern.html#sum">regular expression</a>.\n     *\n     * <p> The array returned by this method contains each substring of this\n     * string that is terminated by another substring that matches the given\n     * expression or is terminated by the end of the string.  The substrings in\n     * the array are in the order in which they occur in this string.  If the\n     * expression does not match any part of the input then the resulting array\n     * has just one element, namely this string.\n     *\n     * <p> When there is a positive-width match at the beginning of this\n     * string then an empty leading substring is included at the beginning\n     * of the resulting array. A zero-width match at the beginning however\n     * never produces such empty leading substring.\n     *\n     * <p> The {@code limit} parameter controls the number of times the\n     * pattern is applied and therefore affects the length of the resulting\n     * array.  If the limit <i>n</i> is greater than zero then the pattern\n     * will be applied at most <i>n</i>&nbsp;-&nbsp;1 times, the array\'s\n     * length will be no greater than <i>n</i>, and the array\'s last entry\n     * will contain all input beyond the last matched delimiter.  If <i>n</i>\n     * is non-positive then the pattern will be applied as many times as\n     * possible and the array can have any length.  If <i>n</i> is zero then\n     * the pattern will be applied as many times as possible, the array can\n     * have any length, and trailing empty strings will be discarded.\n     *\n     * <p> The string {@code "boo:and:foo"}, for example, yields the\n     * following results with these parameters:\n     *\n     * <blockquote><table cellpadding=1 cellspacing=0 summary="Split example showing regex, limit, and result">\n     * <tr>\n     *     <th>Regex</th>\n     *     <th>Limit</th>\n     *     <th>Result</th>\n     * </tr>\n     * <tr><td align=center>:</td>\n     *     <td align=center>2</td>\n     *     <td>{@code { "boo", "and:foo" }}</td></tr>\n     * <tr><td align=center>:</td>\n     *     <td align=center>5</td>\n     *     <td>{@code { "boo", "and", "foo" }}</td></tr>\n     * <tr><td align=center>:</td>\n     *     <td align=center>-2</td>\n     *     <td>{@code { "boo", "and", "foo" }}</td></tr>\n     * <tr><td align=center>o</td>\n     *     <td align=center>5</td>\n     *     <td>{@code { "b", "", ":and:f", "", "" }}</td></tr>\n     * <tr><td align=center>o</td>\n     *     <td align=center>-2</td>\n     *     <td>{@code { "b", "", ":and:f", "", "" }}</td></tr>\n     * <tr><td align=center>o</td>\n     *     <td align=center>0</td>\n     *     <td>{@code { "b", "", ":and:f" }}</td></tr>\n     * </table></blockquote>\n     *\n     * <p> An invocation of this method of the form\n     * <i>str.</i>{@code split(}<i>regex</i>{@code ,}&nbsp;<i>n</i>{@code )}\n     * yields the same result as the expression\n     *\n     * <blockquote>\n     * <code>\n     * {@link java.util.regex.Pattern}.{@link\n     * java.util.regex.Pattern#compile compile}(<i>regex</i>).{@link\n     * java.util.regex.Pattern#split(java.lang.CharSequence,int) split}(<i>str</i>,&nbsp;<i>n</i>)\n     * </code>\n     * </blockquote>\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @param  limit\n     *         the result threshold, as described above\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\'s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex, int limit) {\n        /* fastpath if the regex is a\n         (1)one-char String and this character is not one of the\n            RegEx\'s meta characters ".$|()[{^?*+\\\\", or\n         (2)two-char String and the first char is the backslash and\n            the second is not the ascii digit or ascii letter.\n         */\n        char ch = 0;\n        if (((regex.value.length == 1 &&\n             ".$|()[{^?*+\\\\".indexOf(ch = regex.charAt(0)) == -1) ||\n             (regex.length() == 2 &&\n              regex.charAt(0) == \'\\\\\' &&\n              (((ch = regex.charAt(1))-\'0\')|(\'9\'-ch)) < 0 &&\n              ((ch-\'a\')|(\'z\'-ch)) < 0 &&\n              ((ch-\'A\')|(\'Z\'-ch)) < 0)) &&\n            (ch < Character.MIN_HIGH_SURROGATE ||\n             ch > Character.MAX_LOW_SURROGATE))\n        {\n            int off = 0;\n            int next = 0;\n            boolean limited = limit > 0;\n            ArrayList<String> list = new ArrayList<>();\n            while ((next = indexOf(ch, off)) != -1) {\n                if (!limited || list.size() < limit - 1) {\n                    list.add(substring(off, next));\n                    off = next + 1;\n                } else {    // last one\n                    //assert (list.size() == limit - 1);\n                    list.add(substring(off, value.length));\n                    off = value.length;\n                    break;\n                }\n            }\n            // If no match was found, return this\n            if (off == 0)\n                return new String[]{this};\n\n            // Add remaining segment\n            if (!limited || list.size() < limit)\n                list.add(substring(off, value.length));\n\n            // Construct result\n            int resultSize = list.size();\n            if (limit == 0) {\n                while (resultSize > 0 && list.get(resultSize - 1).length() == 0) {\n                    resultSize--;\n                }\n            }\n            String[] result = new String[resultSize];\n            return list.subList(0, resultSize).toArray(result);\n        }\n        return Pattern.compile(regex).split(this, limit);\n    }\n\n    /**\n     * Splits this string around matches of the given <a\n     * href="../util/regex/Pattern.html#sum">regular expression</a>.\n     *\n     * <p> This method works as if by invoking the two-argument {@link\n     * #split(String, int) split} method with the given expression and a limit\n     * argument of zero.  Trailing empty strings are therefore not included in\n     * the resulting array.\n     *\n     * <p> The string {@code "boo:and:foo"}, for example, yields the following\n     * results with these expressions:\n     *\n     * <blockquote><table cellpadding=1 cellspacing=0 summary="Split examples showing regex and result">\n     * <tr>\n     *  <th>Regex</th>\n     *  <th>Result</th>\n     * </tr>\n     * <tr><td align=center>:</td>\n     *     <td>{@code { "boo", "and", "foo" }}</td></tr>\n     * <tr><td align=center>o</td>\n     *     <td>{@code { "b", "", ":and:f" }}</td></tr>\n     * </table></blockquote>\n     *\n     *\n     * @param  regex\n     *         the delimiting regular expression\n     *\n     * @return  the array of strings computed by splitting this string\n     *          around matches of the given regular expression\n     *\n     * @throws  PatternSyntaxException\n     *          if the regular expression\'s syntax is invalid\n     *\n     * @see java.util.regex.Pattern\n     *\n     * @since 1.4\n     * @spec JSR-51\n     */\n    public String[] split(String regex) {\n        return split(regex, 0);\n    }\n\n    /**\n     * Returns a new String composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of\n     * the specified {@code delimiter}.\n     *\n     * <blockquote>For example,\n     * <pre>{@code\n     *     String message = String.join("-", "Java", "is", "cool");\n     *     // message returned is: "Java-is-cool"\n     * }</pre></blockquote>\n     *\n     * Note that if an element is null, then {@code "null"} is added.\n     *\n     * @param  delimiter the delimiter that separates each element\n     * @param  elements the elements to join together.\n     *\n     * @return a new {@code String} that is composed of the {@code elements}\n     *         separated by the {@code delimiter}\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter, CharSequence... elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        // Number of elements not likely worth Arrays.stream overhead.\n        StringJoiner joiner = new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Returns a new {@code String} composed of copies of the\n     * {@code CharSequence elements} joined together with a copy of the\n     * specified {@code delimiter}.\n     *\n     * <blockquote>For example,\n     * <pre>{@code\n     *     List<String> strings = new LinkedList<>();\n     *     strings.add("Java");strings.add("is");\n     *     strings.add("cool");\n     *     String message = String.join(" ", strings);\n     *     //message returned is: "Java is cool"\n     *\n     *     Set<String> strings = new LinkedHashSet<>();\n     *     strings.add("Java"); strings.add("is");\n     *     strings.add("very"); strings.add("cool");\n     *     String message = String.join("-", strings);\n     *     //message returned is: "Java-is-very-cool"\n     * }</pre></blockquote>\n     *\n     * Note that if an individual element is {@code null}, then {@code "null"} is added.\n     *\n     * @param  delimiter a sequence of characters that is used to separate each\n     *         of the {@code elements} in the resulting {@code String}\n     * @param  elements an {@code Iterable} that will have its {@code elements}\n     *         joined together.\n     *\n     * @return a new {@code String} that is composed from the {@code elements}\n     *         argument\n     *\n     * @throws NullPointerException If {@code delimiter} or {@code elements}\n     *         is {@code null}\n     *\n     * @see    #join(CharSequence,CharSequence...)\n     * @see    java.util.StringJoiner\n     * @since 1.8\n     */\n    public static String join(CharSequence delimiter,\n            Iterable<? extends CharSequence> elements) {\n        Objects.requireNonNull(delimiter);\n        Objects.requireNonNull(elements);\n        StringJoiner joiner = new StringJoiner(delimiter);\n        for (CharSequence cs: elements) {\n            joiner.add(cs);\n        }\n        return joiner.toString();\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the given {@code Locale}.  Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * <p>\n     * Examples of lowercase  mappings are in the following table:\n     * <table border="1" summary="Lowercase mapping examples showing language code of locale, upper case, lower case, and description">\n     * <tr>\n     *   <th>Language Code of Locale</th>\n     *   <th>Upper Case</th>\n     *   <th>Lower Case</th>\n     *   <th>Description</th>\n     * </tr>\n     * <tr>\n     *   <td>tr (Turkish)</td>\n     *   <td>&#92;u0130</td>\n     *   <td>&#92;u0069</td>\n     *   <td>capital letter I with dot above -&gt; small letter i</td>\n     * </tr>\n     * <tr>\n     *   <td>tr (Turkish)</td>\n     *   <td>&#92;u0049</td>\n     *   <td>&#92;u0131</td>\n     *   <td>capital letter I -&gt; small letter dotless i </td>\n     * </tr>\n     * <tr>\n     *   <td>(all)</td>\n     *   <td>French Fries</td>\n     *   <td>french fries</td>\n     *   <td>lowercased all chars in String</td>\n     * </tr>\n     * <tr>\n     *   <td>(all)</td>\n     *   <td><img src="doc-files/capiota.gif" alt="capiota"><img src="doc-files/capchi.gif" alt="capchi">\n     *       <img src="doc-files/captheta.gif" alt="captheta"><img src="doc-files/capupsil.gif" alt="capupsil">\n     *       <img src="doc-files/capsigma.gif" alt="capsigma"></td>\n     *   <td><img src="doc-files/iota.gif" alt="iota"><img src="doc-files/chi.gif" alt="chi">\n     *       <img src="doc-files/theta.gif" alt="theta"><img src="doc-files/upsilon.gif" alt="upsilon">\n     *       <img src="doc-files/sigma1.gif" alt="sigma"></td>\n     *   <td>lowercased all chars in String</td>\n     * </tr>\n     * </table>\n     *\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toUpperCase(Locale)\n     * @since   1.1\n     */\n    public String toLowerCase(Locale locale) {\n        if (locale == null) {\n            throw new NullPointerException();\n        }\n\n        int firstUpper;\n        final int len = value.length;\n\n        /* Now check if there are any characters that need to be changed. */\n        scan: {\n            for (firstUpper = 0 ; firstUpper < len; ) {\n                char c = value[firstUpper];\n                if ((c >= Character.MIN_HIGH_SURROGATE)\n                        && (c <= Character.MAX_HIGH_SURROGATE)) {\n                    int supplChar = codePointAt(firstUpper);\n                    if (supplChar != Character.toLowerCase(supplChar)) {\n                        break scan;\n                    }\n                    firstUpper += Character.charCount(supplChar);\n                } else {\n                    if (c != Character.toLowerCase(c)) {\n                        break scan;\n                    }\n                    firstUpper++;\n                }\n            }\n            return this;\n        }\n\n        char[] result = new char[len];\n        int resultOffset = 0;  /* result may grow, so i+resultOffset\n                                * is the write location in result */\n\n        /* Just copy the first few lowerCase characters. */\n        System.arraycopy(value, 0, result, 0, firstUpper);\n\n        String lang = locale.getLanguage();\n        boolean localeDependent =\n                (lang == "tr" || lang == "az" || lang == "lt");\n        char[] lowerCharArray;\n        int lowerChar;\n        int srcChar;\n        int srcCount;\n        for (int i = firstUpper; i < len; i += srcCount) {\n            srcChar = (int)value[i];\n            if ((char)srcChar >= Character.MIN_HIGH_SURROGATE\n                    && (char)srcChar <= Character.MAX_HIGH_SURROGATE) {\n                srcChar = codePointAt(i);\n                srcCount = Character.charCount(srcChar);\n            } else {\n                srcCount = 1;\n            }\n            if (localeDependent ||\n                srcChar == \'\\u03A3\' || // GREEK CAPITAL LETTER SIGMA\n                srcChar == \'\\u0130\') { // LATIN CAPITAL LETTER I WITH DOT ABOVE\n                lowerChar = ConditionalSpecialCasing.toLowerCaseEx(this, i, locale);\n            } else {\n                lowerChar = Character.toLowerCase(srcChar);\n            }\n            if ((lowerChar == Character.ERROR)\n                    || (lowerChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) {\n                if (lowerChar == Character.ERROR) {\n                    lowerCharArray =\n                            ConditionalSpecialCasing.toLowerCaseCharArray(this, i, locale);\n                } else if (srcCount == 2) {\n                    resultOffset += Character.toChars(lowerChar, result, i + resultOffset) - srcCount;\n                    continue;\n                } else {\n                    lowerCharArray = Character.toChars(lowerChar);\n                }\n\n                /* Grow result if needed */\n                int mapLen = lowerCharArray.length;\n                if (mapLen > srcCount) {\n                    char[] result2 = new char[result.length + mapLen - srcCount];\n                    System.arraycopy(result, 0, result2, 0, i + resultOffset);\n                    result = result2;\n                }\n                for (int x = 0; x < mapLen; ++x) {\n                    result[i + resultOffset + x] = lowerCharArray[x];\n                }\n                resultOffset += (mapLen - srcCount);\n            } else {\n                result[i + resultOffset] = (char)lowerChar;\n            }\n        }\n        return new String(result, 0, len + resultOffset);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to lower\n     * case using the rules of the default locale. This is equivalent to calling\n     * {@code toLowerCase(Locale.getDefault())}.\n     * <p>\n     * <b>Note:</b> This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code "TITLE".toLowerCase()} in a Turkish locale\n     * returns {@code "t\\u005Cu0131tle"}, where \'\\u005Cu0131\' is the\n     * LATIN SMALL LETTER DOTLESS I character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toLowerCase(Locale.ROOT)}.\n     * <p>\n     * @return  the {@code String}, converted to lowercase.\n     * @see     java.lang.String#toLowerCase(Locale)\n     */\n    public String toLowerCase() {\n        return toLowerCase(Locale.getDefault());\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the given {@code Locale}. Case mapping is based\n     * on the Unicode Standard version specified by the {@link java.lang.Character Character}\n     * class. Since case mappings are not always 1:1 char mappings, the resulting\n     * {@code String} may be a different length than the original {@code String}.\n     * <p>\n     * Examples of locale-sensitive and 1:M case mappings are in the following table.\n     *\n     * <table border="1" summary="Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.">\n     * <tr>\n     *   <th>Language Code of Locale</th>\n     *   <th>Lower Case</th>\n     *   <th>Upper Case</th>\n     *   <th>Description</th>\n     * </tr>\n     * <tr>\n     *   <td>tr (Turkish)</td>\n     *   <td>&#92;u0069</td>\n     *   <td>&#92;u0130</td>\n     *   <td>small letter i -&gt; capital letter I with dot above</td>\n     * </tr>\n     * <tr>\n     *   <td>tr (Turkish)</td>\n     *   <td>&#92;u0131</td>\n     *   <td>&#92;u0049</td>\n     *   <td>small letter dotless i -&gt; capital letter I</td>\n     * </tr>\n     * <tr>\n     *   <td>(all)</td>\n     *   <td>&#92;u00df</td>\n     *   <td>&#92;u0053 &#92;u0053</td>\n     *   <td>small letter sharp s -&gt; two letters: SS</td>\n     * </tr>\n     * <tr>\n     *   <td>(all)</td>\n     *   <td>Fahrvergn&uuml;gen</td>\n     *   <td>FAHRVERGN&Uuml;GEN</td>\n     *   <td></td>\n     * </tr>\n     * </table>\n     * @param locale use the case transformation rules for this locale\n     * @return the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase()\n     * @see     java.lang.String#toLowerCase()\n     * @see     java.lang.String#toLowerCase(Locale)\n     * @since   1.1\n     */\n    public String toUpperCase(Locale locale) {\n        if (locale == null) {\n            throw new NullPointerException();\n        }\n\n        int firstLower;\n        final int len = value.length;\n\n        /* Now check if there are any characters that need to be changed. */\n        scan: {\n            for (firstLower = 0 ; firstLower < len; ) {\n                int c = (int)value[firstLower];\n                int srcCount;\n                if ((c >= Character.MIN_HIGH_SURROGATE)\n                        && (c <= Character.MAX_HIGH_SURROGATE)) {\n                    c = codePointAt(firstLower);\n                    srcCount = Character.charCount(c);\n                } else {\n                    srcCount = 1;\n                }\n                int upperCaseChar = Character.toUpperCaseEx(c);\n                if ((upperCaseChar == Character.ERROR)\n                        || (c != upperCaseChar)) {\n                    break scan;\n                }\n                firstLower += srcCount;\n            }\n            return this;\n        }\n\n        /* result may grow, so i+resultOffset is the write location in result */\n        int resultOffset = 0;\n        char[] result = new char[len]; /* may grow */\n\n        /* Just copy the first few upperCase characters. */\n        System.arraycopy(value, 0, result, 0, firstLower);\n\n        String lang = locale.getLanguage();\n        boolean localeDependent =\n                (lang == "tr" || lang == "az" || lang == "lt");\n        char[] upperCharArray;\n        int upperChar;\n        int srcChar;\n        int srcCount;\n        for (int i = firstLower; i < len; i += srcCount) {\n            srcChar = (int)value[i];\n            if ((char)srcChar >= Character.MIN_HIGH_SURROGATE &&\n                (char)srcChar <= Character.MAX_HIGH_SURROGATE) {\n                srcChar = codePointAt(i);\n                srcCount = Character.charCount(srcChar);\n            } else {\n                srcCount = 1;\n            }\n            if (localeDependent) {\n                upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale);\n            } else {\n                upperChar = Character.toUpperCaseEx(srcChar);\n            }\n            if ((upperChar == Character.ERROR)\n                    || (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) {\n                if (upperChar == Character.ERROR) {\n                    if (localeDependent) {\n                        upperCharArray =\n                                ConditionalSpecialCasing.toUpperCaseCharArray(this, i, locale);\n                    } else {\n                        upperCharArray = Character.toUpperCaseCharArray(srcChar);\n                    }\n                } else if (srcCount == 2) {\n                    resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount;\n                    continue;\n                } else {\n                    upperCharArray = Character.toChars(upperChar);\n                }\n\n                /* Grow result if needed */\n                int mapLen = upperCharArray.length;\n                if (mapLen > srcCount) {\n                    char[] result2 = new char[result.length + mapLen - srcCount];\n                    System.arraycopy(result, 0, result2, 0, i + resultOffset);\n                    result = result2;\n                }\n                for (int x = 0; x < mapLen; ++x) {\n                    result[i + resultOffset + x] = upperCharArray[x];\n                }\n                resultOffset += (mapLen - srcCount);\n            } else {\n                result[i + resultOffset] = (char)upperChar;\n            }\n        }\n        return new String(result, 0, len + resultOffset);\n    }\n\n    /**\n     * Converts all of the characters in this {@code String} to upper\n     * case using the rules of the default locale. This method is equivalent to\n     * {@code toUpperCase(Locale.getDefault())}.\n     * <p>\n     * <b>Note:</b> This method is locale sensitive, and may produce unexpected\n     * results if used for strings that are intended to be interpreted locale\n     * independently.\n     * Examples are programming language identifiers, protocol keys, and HTML\n     * tags.\n     * For instance, {@code "title".toUpperCase()} in a Turkish locale\n     * returns {@code "T\\u005Cu0130TLE"}, where \'\\u005Cu0130\' is the\n     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.\n     * To obtain correct results for locale insensitive strings, use\n     * {@code toUpperCase(Locale.ROOT)}.\n     * <p>\n     * @return  the {@code String}, converted to uppercase.\n     * @see     java.lang.String#toUpperCase(Locale)\n     */\n    public String toUpperCase() {\n        return toUpperCase(Locale.getDefault());\n    }\n\n    /**\n     * Returns a string whose value is this string, with any leading and trailing\n     * whitespace removed.\n     * <p>\n     * If this {@code String} object represents an empty character\n     * sequence, or the first and last characters of character sequence\n     * represented by this {@code String} object both have codes\n     * greater than {@code \'\\u005Cu0020\'} (the space character), then a\n     * reference to this {@code String} object is returned.\n     * <p>\n     * Otherwise, if there is no character with a code greater than\n     * {@code \'\\u005Cu0020\'} in the string, then a\n     * {@code String} object representing an empty string is\n     * returned.\n     * <p>\n     * Otherwise, let <i>k</i> be the index of the first character in the\n     * string whose code is greater than {@code \'\\u005Cu0020\'}, and let\n     * <i>m</i> be the index of the last character in the string whose code\n     * is greater than {@code \'\\u005Cu0020\'}. A {@code String}\n     * object is returned, representing the substring of this string that\n     * begins with the character at index <i>k</i> and ends with the\n     * character at index <i>m</i>-that is, the result of\n     * {@code this.substring(k, m + 1)}.\n     * <p>\n     * This method may be used to trim whitespace (as defined above) from\n     * the beginning and end of a string.\n     *\n     * @return  A string whose value is this string, with any leading and trailing white\n     *          space removed, or this string if it has no leading or\n     *          trailing white space.\n     */\n    public String trim() {\n        int len = value.length;\n        int st = 0;\n        char[] val = value;    /* avoid getfield opcode */\n\n        while ((st < len) && (val[st] <= \' \')) {\n            st++;\n        }\n        while ((st < len) && (val[len - 1] <= \' \')) {\n            len--;\n        }\n        return ((st > 0) || (len < value.length)) ? substring(st, len) : this;\n    }\n\n    /**\n     * This object (which is already a string!) is itself returned.\n     *\n     * @return  the string itself.\n     */\n    public String toString() {\n        return this;\n    }\n\n    /**\n     * Converts this string to a new character array.\n     *\n     * @return  a newly allocated character array whose length is the length\n     *          of this string and whose contents are initialized to contain\n     *          the character sequence represented by this string.\n     */\n    public char[] toCharArray() {\n        // Cannot use Arrays.copyOf because of class initialization order issues\n        char result[] = new char[value.length];\n        System.arraycopy(value, 0, result, 0, value.length);\n        return result;\n    }\n\n    /**\n     * Returns a formatted string using the specified format string and\n     * arguments.\n     *\n     * <p> The locale always used is the one returned by {@link\n     * java.util.Locale#getDefault() Locale.getDefault()}.\n     *\n     * @param  format\n     *         A <a href="../util/Formatter.html#syntax">format string</a>\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         <cite>The Java&trade; Virtual Machine Specification</cite>.\n     *         The behaviour on a\n     *         {@code null} argument depends on the <a\n     *         href="../util/Formatter.html#syntax">conversion</a>.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the <a\n     *          href="../util/Formatter.html#detail">Details</a> section of the\n     *          formatter class specification.\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(String format, Object... args) {\n        return new Formatter().format(format, args).toString();\n    }\n\n    /**\n     * Returns a formatted string using the specified locale, format string,\n     * and arguments.\n     *\n     * @param  l\n     *         The {@linkplain java.util.Locale locale} to apply during\n     *         formatting.  If {@code l} is {@code null} then no localization\n     *         is applied.\n     *\n     * @param  format\n     *         A <a href="../util/Formatter.html#syntax">format string</a>\n     *\n     * @param  args\n     *         Arguments referenced by the format specifiers in the format\n     *         string.  If there are more arguments than format specifiers, the\n     *         extra arguments are ignored.  The number of arguments is\n     *         variable and may be zero.  The maximum number of arguments is\n     *         limited by the maximum dimension of a Java array as defined by\n     *         <cite>The Java&trade; Virtual Machine Specification</cite>.\n     *         The behaviour on a\n     *         {@code null} argument depends on the\n     *         <a href="../util/Formatter.html#syntax">conversion</a>.\n     *\n     * @throws  java.util.IllegalFormatException\n     *          If a format string contains an illegal syntax, a format\n     *          specifier that is incompatible with the given arguments,\n     *          insufficient arguments given the format string, or other\n     *          illegal conditions.  For specification of all possible\n     *          formatting errors, see the <a\n     *          href="../util/Formatter.html#detail">Details</a> section of the\n     *          formatter class specification\n     *\n     * @return  A formatted string\n     *\n     * @see  java.util.Formatter\n     * @since  1.5\n     */\n    public static String format(Locale l, String format, Object... args) {\n        return new Formatter(l).format(format, args).toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code Object} argument.\n     *\n     * @param   obj   an {@code Object}.\n     * @return  if the argument is {@code null}, then a string equal to\n     *          {@code "null"}; otherwise, the value of\n     *          {@code obj.toString()} is returned.\n     * @see     java.lang.Object#toString()\n     */\n    public static String valueOf(Object obj) {\n        return (obj == null) ? "null" : obj.toString();\n    }\n\n    /**\n     * Returns the string representation of the {@code char} array\n     * argument. The contents of the character array are copied; subsequent\n     * modification of the character array does not affect the returned\n     * string.\n     *\n     * @param   data     the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String valueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of a specific subarray of the\n     * {@code char} array argument.\n     * <p>\n     * The {@code offset} argument is the index of the first\n     * character of the subarray. The {@code count} argument\n     * specifies the length of the subarray. The contents of the subarray\n     * are copied; subsequent modification of the character array does not\n     * affect the returned string.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String valueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[], int, int)}.\n     *\n     * @param   data     the character array.\n     * @param   offset   initial offset of the subarray.\n     * @param   count    length of the subarray.\n     * @return  a {@code String} that contains the characters of the\n     *          specified subarray of the character array.\n     * @exception IndexOutOfBoundsException if {@code offset} is\n     *          negative, or {@code count} is negative, or\n     *          {@code offset+count} is larger than\n     *          {@code data.length}.\n     */\n    public static String copyValueOf(char data[], int offset, int count) {\n        return new String(data, offset, count);\n    }\n\n    /**\n     * Equivalent to {@link #valueOf(char[])}.\n     *\n     * @param   data   the character array.\n     * @return  a {@code String} that contains the characters of the\n     *          character array.\n     */\n    public static String copyValueOf(char data[]) {\n        return new String(data);\n    }\n\n    /**\n     * Returns the string representation of the {@code boolean} argument.\n     *\n     * @param   b   a {@code boolean}.\n     * @return  if the argument is {@code true}, a string equal to\n     *          {@code "true"} is returned; otherwise, a string equal to\n     *          {@code "false"} is returned.\n     */\n    public static String valueOf(boolean b) {\n        return b ? "true" : "false";\n    }\n\n    /**\n     * Returns the string representation of the {@code char}\n     * argument.\n     *\n     * @param   c   a {@code char}.\n     * @return  a string of length {@code 1} containing\n     *          as its single character the argument {@code c}.\n     */\n    public static String valueOf(char c) {\n        char data[] = {c};\n        return new String(data, true);\n    }\n\n    /**\n     * Returns the string representation of the {@code int} argument.\n     * <p>\n     * The representation is exactly the one returned by the\n     * {@code Integer.toString} method of one argument.\n     *\n     * @param   i   an {@code int}.\n     * @return  a string representation of the {@code int} argument.\n     * @see     java.lang.Integer#toString(int, int)\n     */\n    public static String valueOf(int i) {\n        return Integer.toString(i);\n    }\n\n    /**\n     * Returns the string representation of the {@code long} argument.\n     * <p>\n     * The representation is exactly the one returned by the\n     * {@code Long.toString} method of one argument.\n     *\n     * @param   l   a {@code long}.\n     * @return  a string representation of the {@code long} argument.\n     * @see     java.lang.Long#toString(long)\n     */\n    public static String valueOf(long l) {\n        return Long.toString(l);\n    }\n\n    /**\n     * Returns the string representation of the {@code float} argument.\n     * <p>\n     * The representation is exactly the one returned by the\n     * {@code Float.toString} method of one argument.\n     *\n     * @param   f   a {@code float}.\n     * @return  a string representation of the {@code float} argument.\n     * @see     java.lang.Float#toString(float)\n     */\n    public static String valueOf(float f) {\n        return Float.toString(f);\n    }\n\n    /**\n     * Returns the string representation of the {@code double} argument.\n     * <p>\n     * The representation is exactly the one returned by the\n     * {@code Double.toString} method of one argument.\n     *\n     * @param   d   a {@code double}.\n     * @return  a  string representation of the {@code double} argument.\n     * @see     java.lang.Double#toString(double)\n     */\n    public static String valueOf(double d) {\n        return Double.toString(d);\n    }\n\n    /**\n     * Returns a canonical representation for the string object.\n     * <p>\n     * A pool of strings, initially empty, is maintained privately by the\n     * class {@code String}.\n     * <p>\n     * When the intern method is invoked, if the pool already contains a\n     * string equal to this {@code String} object as determined by\n     * the {@link #equals(Object)} method, then the string from the pool is\n     * returned. Otherwise, this {@code String} object is added to the\n     * pool and a reference to this {@code String} object is returned.\n     * <p>\n     * It follows that for any two strings {@code s} and {@code t},\n     * {@code s.intern() == t.intern()} is {@code true}\n     * if and only if {@code s.equals(t)} is {@code true}.\n     * <p>\n     * All literal strings and string-valued constant expressions are\n     * interned. String literals are defined in section 3.10.5 of the\n     * <cite>The Java&trade; Language Specification</cite>.\n     *\n     * @return  a string that has the same contents as this string, but is\n     *          guaranteed to be from a pool of unique strings.\n     */\n    public native String intern();\n}\n\n')))}d.isMDXComponent=!0}}]);